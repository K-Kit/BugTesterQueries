{"version":3,"sources":["logo.svg","withRoot.js","MultipleSelect.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","theme","createMuiTheme","palette","primary","light","purple","main","dark","secondary","green","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","styles","CssBaseline_default","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","name","that","fontWeight","state","indexOf","fontWeightRegular","fontWeightMedium","MultipleSelect","handleChange","event","console","log","target","value","values","length","_this","setState","slice","callback","_this2","this","classes","_this$props","items","label","className","root","FormControl_default","formControl","InputLabel_default","htmlFor","Select_default","multiple","onChange","input","Input_default","id","map","MenuItem_default","key","React","withStyles","display","flexWrap","margin","spacing","unit","minWidth","maxWidth","chips","chip","noLabel","marginTop","withTheme","deviceNames","countries","ExchangeRates","react_apollo_esm","query","gql","_templateObject","JSON","stringify","args","devices","_ref","loading","error","data","Table_default","table","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","testers","_ref2","uid","firstName","lastName","experience","country","component","scope","item","description","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","deviceCallback","bind","assertThisInitialized","CountryCallback","src_MultipleSelect","App_ExchangeRates","textAlign","paddingTop","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c83202fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n// A theme with custom primary and secondary color.\r\n// It's optional.\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: purple[300],\r\n      main: purple[500],\r\n      dark: purple[700],\r\n    },\r\n    secondary: {\r\n      light: green[300],\r\n      main: green[500],\r\n      dark: green[700],\r\n    },\r\n  },\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n});\r\n\r\nfunction withRoot(Component) {\r\n  function WithRoot(props) {\r\n    // MuiThemeProvider makes the theme available down the React tree\r\n    // thanks to React context.\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n        <CssBaseline />\r\n        <Component {...props} />\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n\r\n  return WithRoot;\r\n}\r\n\r\nexport default withRoot;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120,\r\n    maxWidth: 300,\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing.unit / 4,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing.unit * 3,\r\n  },\r\n});\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst names = [\r\n  'Oliver Hansen',\r\n  'Van Henry',\r\n  'April Tucker',\r\n  'Ralph Hubbard',\r\n  'Omar Alexander',\r\n  'Carlos Abbott',\r\n  'Miriam Wagner',\r\n  'Bradley Wilkerson',\r\n  'Virginia Andrews',\r\n  'Kelly Snyder',\r\n];\r\n\r\nfunction getStyles(name, that) {\r\n  return {\r\n    fontWeight:\r\n      that.state.name.indexOf(name) === -1\r\n        ? that.props.theme.typography.fontWeightRegular\r\n        : that.props.theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nclass MultipleSelect extends React.Component {\r\n  state = {\r\n    name: [\"ALL\"],\r\n  };\r\n\r\n  handleChange = event => {\r\n      console.log(event.target.value)\r\n      let values = event.target.value;\r\n    if (values[values.length-1] === \"ALL\") {\r\n        values = [\"ALL\"]\r\n        this.setState({ name: values })\r\n    }\r\n    else {\r\n        if(values[0] === \"ALL\"){\r\n            values = values.slice(1)\r\n        }\r\n        this.setState({ name: values })\r\n    };\r\n    console.log(this.props.callback)\r\n    this.props.callback(values)\r\n  };\r\n\r\n//   handleChangeMultiple = event => {\r\n//     const { options } = event.target;\r\n//     const value = [];\r\n//     for (let i = 0, l = options.length; i < l; i += 1) {\r\n//       if (options[i].selected) {\r\n//         value.push(options[i].value);\r\n//       }\r\n//     }\r\n//     if (value[-1] === \"ALL\"){\r\n//         value = [\"ALL\"]\r\n//     }\r\n//     this.setState({\r\n//       name: value,\r\n//     });\r\n//   };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { items, label } = this.props;\r\n\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel htmlFor=\"select-multiple\">{label}</InputLabel>\r\n          <Select\r\n            multiple\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            input={<Input id=\"select-multiple\" />}\r\n            MenuProps={MenuProps}\r\n          >\r\n            {items.map(name => (\r\n              <MenuItem key={name} value={name} style={getStyles(name, this)}>\r\n                {name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMultipleSelect.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(MultipleSelect);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { Grid, Card } from '@material-ui/core';\nimport withRoot from './withRoot';\nimport MultipleSelect from './MultipleSelect';\nimport { object } from 'prop-types';\n\nconst deviceNames = [\n  \"ALL\",\n  \"iPhone 4\",\n  \"iPhone 4S\",\n  \"iPhone 5\",\n  \"Galaxy S3\",\n  \"Galaxy S4\",\n  \"Nexus 4\",\n  \"Droid Razor\",\n  \"Droid DNA\",\n  \"HTC One\",\n  \"iPhone 3\",\n]\n\nconst countries = [\n  \"ALL\",\n  \"US\",\n  \"GB\",\n  \"JP\"\n]\n\n\nconst styles = theme => ({\n  root: {\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit * 20,\n  },\n  table: {\n    minWidth: 700,\n    // maxWidth: 800\n  },\n});\n\nconst ExchangeRates = (props) => (\n  <Query\n    query={gql`\n    {testers(countries: ${JSON.stringify(props.args.countries)}, devices: ${JSON.stringify(props.args.devices)}) {\n      uid\n      country\n      firstName\n      lastName\n      experience\n      devices{\n        description\n        deviceid\n      }\n    }}\n    `}\n  >\n    {({ loading, error, data }) => {\n      const { classes } = props.props;\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n      console.log(\"args\", props.args)\n      return (\n          <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>ID</TableCell>\n              <TableCell align=\"right\">Last Name</TableCell>\n              <TableCell align=\"right\">First Name</TableCell>\n              <TableCell align=\"right\">Country</TableCell>\n              <TableCell align=\"right\">Experience</TableCell>\n              <TableCell align=\"center\">Devices</TableCell>\n            </TableRow>\n          </TableHead>\n            <TableBody>\n              {\n                data.testers.map(({uid, firstName, lastName, experience, devices, country}) =>(\n                  <TableRow key={uid}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {uid}\n                    </TableCell>\n                    <TableCell align=\"right\">{firstName}</TableCell>\n                    <TableCell align=\"right\">{lastName}</TableCell>\n                    <TableCell align=\"right\">{country}</TableCell>\n                    <TableCell align=\"right\">{experience}</TableCell>\n                    <TableCell align=\"left\">\n                      <ul>\n                        {\n                          devices.map(item => (\n                          <li>{item.description}</li>\n                        ))\n                        }\n                      </ul>\n                    </TableCell>\n                  </TableRow>\n              ) )\n              }\n            </TableBody>\n          </Table>\n      ) \n      \n    }}\n  </Query>\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        countries: [\"ALL\"],\n        devices: [\"ALL\"]\n      };\n      this.deviceCallback = this.deviceCallback.bind(this)\n      this.CountryCallback = this.CountryCallback.bind(this)\n    }\n  \n  deviceCallback(devices) {\n    console.log('triggered')\n    this.setState({devices: devices})\n  }\n  CountryCallback(countries) {\n    this.setState({countries: countries})\n  }\n  render() {\n  const { classes } = this.props;\n    return (     \n      \n            <div className={classes.root}>\n              <MultipleSelect items={deviceNames} label=\"Devices\" callback={this.deviceCallback}/>\n              <MultipleSelect items={countries} label=\"Countries\" callback={this.CountryCallback} />\n              <ExchangeRates props={this.props} args={this.state}/>\n            </div>\n    );\n  }\n}\n\nexport default withRoot(withStyles(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-boost\";\nimport { Query, ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"http://45.77.216.107:5000/graphql\"\n});\n\n\n\nReactDOM.render(\n<ApolloProvider client={client}>\n<App />\n</ApolloProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}